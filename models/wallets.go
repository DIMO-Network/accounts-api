// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Wallet is an object representing the database table.
type Wallet struct {
	Address   []byte `boil:"address" json:"address" toml:"address" yaml:"address"`
	AccountID string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`

	R *walletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L walletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalletColumns = struct {
	Address   string
	AccountID string
}{
	Address:   "address",
	AccountID: "account_id",
}

var WalletTableColumns = struct {
	Address   string
	AccountID string
}{
	Address:   "wallets.address",
	AccountID: "wallets.account_id",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var WalletWhere = struct {
	Address   whereHelper__byte
	AccountID whereHelperstring
}{
	Address:   whereHelper__byte{field: "\"accounts_api\".\"wallets\".\"address\""},
	AccountID: whereHelperstring{field: "\"accounts_api\".\"wallets\".\"account_id\""},
}

// WalletRels is where relationship names are stored.
var WalletRels = struct {
	Account string
}{
	Account: "Account",
}

// walletR is where relationships are stored.
type walletR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*walletR) NewStruct() *walletR {
	return &walletR{}
}

func (r *walletR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

// walletL is where Load methods for each relationship are stored.
type walletL struct{}

var (
	walletAllColumns            = []string{"address", "account_id"}
	walletColumnsWithoutDefault = []string{"address", "account_id"}
	walletColumnsWithDefault    = []string{}
	walletPrimaryKeyColumns     = []string{"address"}
	walletGeneratedColumns      = []string{}
)

type (
	// WalletSlice is an alias for a slice of pointers to Wallet.
	// This should almost always be used instead of []Wallet.
	WalletSlice []*Wallet
	// WalletHook is the signature for custom Wallet hook methods
	WalletHook func(context.Context, boil.ContextExecutor, *Wallet) error

	walletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walletType                 = reflect.TypeOf(&Wallet{})
	walletMapping              = queries.MakeStructMapping(walletType)
	walletPrimaryKeyMapping, _ = queries.BindMapping(walletType, walletMapping, walletPrimaryKeyColumns)
	walletInsertCacheMut       sync.RWMutex
	walletInsertCache          = make(map[string]insertCache)
	walletUpdateCacheMut       sync.RWMutex
	walletUpdateCache          = make(map[string]updateCache)
	walletUpsertCacheMut       sync.RWMutex
	walletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var walletAfterSelectMu sync.Mutex
var walletAfterSelectHooks []WalletHook

var walletBeforeInsertMu sync.Mutex
var walletBeforeInsertHooks []WalletHook
var walletAfterInsertMu sync.Mutex
var walletAfterInsertHooks []WalletHook

var walletBeforeUpdateMu sync.Mutex
var walletBeforeUpdateHooks []WalletHook
var walletAfterUpdateMu sync.Mutex
var walletAfterUpdateHooks []WalletHook

var walletBeforeDeleteMu sync.Mutex
var walletBeforeDeleteHooks []WalletHook
var walletAfterDeleteMu sync.Mutex
var walletAfterDeleteHooks []WalletHook

var walletBeforeUpsertMu sync.Mutex
var walletBeforeUpsertHooks []WalletHook
var walletAfterUpsertMu sync.Mutex
var walletAfterUpsertHooks []WalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Wallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Wallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Wallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Wallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Wallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Wallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Wallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Wallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Wallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWalletHook registers your hook function for all future operations.
func AddWalletHook(hookPoint boil.HookPoint, walletHook WalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		walletAfterSelectMu.Lock()
		walletAfterSelectHooks = append(walletAfterSelectHooks, walletHook)
		walletAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		walletBeforeInsertMu.Lock()
		walletBeforeInsertHooks = append(walletBeforeInsertHooks, walletHook)
		walletBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		walletAfterInsertMu.Lock()
		walletAfterInsertHooks = append(walletAfterInsertHooks, walletHook)
		walletAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		walletBeforeUpdateMu.Lock()
		walletBeforeUpdateHooks = append(walletBeforeUpdateHooks, walletHook)
		walletBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		walletAfterUpdateMu.Lock()
		walletAfterUpdateHooks = append(walletAfterUpdateHooks, walletHook)
		walletAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		walletBeforeDeleteMu.Lock()
		walletBeforeDeleteHooks = append(walletBeforeDeleteHooks, walletHook)
		walletBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		walletAfterDeleteMu.Lock()
		walletAfterDeleteHooks = append(walletAfterDeleteHooks, walletHook)
		walletAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		walletBeforeUpsertMu.Lock()
		walletBeforeUpsertHooks = append(walletBeforeUpsertHooks, walletHook)
		walletBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		walletAfterUpsertMu.Lock()
		walletAfterUpsertHooks = append(walletAfterUpsertHooks, walletHook)
		walletAfterUpsertMu.Unlock()
	}
}

// One returns a single wallet record from the query.
func (q walletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Wallet, error) {
	o := &Wallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Wallet records from the query.
func (q walletQuery) All(ctx context.Context, exec boil.ContextExecutor) (WalletSlice, error) {
	var o []*Wallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Wallet slice")
	}

	if len(walletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Wallet records in the query.
func (q walletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wallets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q walletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wallets exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Wallet) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walletL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWallet interface{}, mods queries.Applicator) error {
	var slice []*Wallet
	var object *Wallet

	if singular {
		var ok bool
		object, ok = maybeWallet.(*Wallet)
		if !ok {
			object = new(Wallet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWallet))
			}
		}
	} else {
		s, ok := maybeWallet.(*[]*Wallet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWallet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &walletR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walletR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts_api.accounts`),
		qm.WhereIn(`accounts_api.accounts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.Wallet = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Wallet = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the wallet to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.Wallet.
func (o *Wallet) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"accounts_api\".\"wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, walletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Address}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &walletR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			Wallet: o,
		}
	} else {
		related.R.Wallet = o
	}

	return nil
}

// Wallets retrieves all the records using an executor.
func Wallets(mods ...qm.QueryMod) walletQuery {
	mods = append(mods, qm.From("\"accounts_api\".\"wallets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"accounts_api\".\"wallets\".*"})
	}

	return walletQuery{q}
}

// FindWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWallet(ctx context.Context, exec boil.ContextExecutor, address []byte, selectCols ...string) (*Wallet, error) {
	walletObj := &Wallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"accounts_api\".\"wallets\" where \"address\"=$1", sel,
	)

	q := queries.Raw(query, address)

	err := q.Bind(ctx, exec, walletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wallets")
	}

	if err = walletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return walletObj, err
	}

	return walletObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Wallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wallets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walletInsertCacheMut.RLock()
	cache, cached := walletInsertCache[key]
	walletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walletAllColumns,
			walletColumnsWithDefault,
			walletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walletType, walletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walletType, walletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"accounts_api\".\"wallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"accounts_api\".\"wallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wallets")
	}

	if !cached {
		walletInsertCacheMut.Lock()
		walletInsertCache[key] = cache
		walletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Wallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Wallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	walletUpdateCacheMut.RLock()
	cache, cached := walletUpdateCache[key]
	walletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walletAllColumns,
			walletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"accounts_api\".\"wallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, walletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walletType, walletMapping, append(wl, walletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wallets")
	}

	if !cached {
		walletUpdateCacheMut.Lock()
		walletUpdateCache[key] = cache
		walletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q walletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wallets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"accounts_api\".\"wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, walletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wallet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Wallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no wallets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	walletUpsertCacheMut.RLock()
	cache, cached := walletUpsertCache[key]
	walletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			walletAllColumns,
			walletColumnsWithDefault,
			walletColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			walletAllColumns,
			walletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wallets, could not build update column list")
		}

		ret := strmangle.SetComplement(walletAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(walletPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert wallets, could not build conflict column list")
			}

			conflict = make([]string, len(walletPrimaryKeyColumns))
			copy(conflict, walletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"accounts_api\".\"wallets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(walletType, walletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(walletType, walletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wallets")
	}

	if !cached {
		walletUpsertCacheMut.Lock()
		walletUpsertCache[key] = cache
		walletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Wallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Wallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Wallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walletPrimaryKeyMapping)
	sql := "DELETE FROM \"accounts_api\".\"wallets\" WHERE \"address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no walletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(walletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"accounts_api\".\"wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallets")
	}

	if len(walletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Wallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWallet(ctx, exec, o.Address)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"accounts_api\".\"wallets\".* FROM \"accounts_api\".\"wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WalletSlice")
	}

	*o = slice

	return nil
}

// WalletExists checks if the Wallet row exists.
func WalletExists(ctx context.Context, exec boil.ContextExecutor, address []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"accounts_api\".\"wallets\" where \"address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, address)
	}
	row := exec.QueryRowContext(ctx, sql, address)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wallets exists")
	}

	return exists, nil
}

// Exists checks if the Wallet row exists.
func (o *Wallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WalletExists(ctx, exec, o.Address)
}
